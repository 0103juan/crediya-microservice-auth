# Versión de la especificación OpenAPI
openapi: 3.0.1

# Información básica de la API
info:
  title: API de Autenticación
  description: Microservicio para gestionar usuarios y autenticación.
  version: 1.0.0

# Servidores donde la API estará disponible
servers:
  - url: http://localhost:8080/api/v1

# Componentes reutilizables (esquemas de datos y seguridad)
components:
  # Esquemas de datos (Modelos)
  schemas:
    # DTO para la solicitud de creación de usuario
    userRequest:
      type: object
      description: Datos para registrar un nuevo usuario en el sistema.
      required:
        - nombres
        - apellidos
        - email
        - password
      properties:
        nombres:
          type: string
          description: "Nombres del usuario."
          example: "Juan Alberto"
        apellidos:
          type: string
          description: "Apellidos del usuario."
          example: "Pérez Gómez"
        email:
          type: string
          format: email
          description: "Correo electrónico único del usuario."
          example: "juan.perez@example.com"
        password:
          type: string
          format: password
          description: "Contraseña para el nuevo usuario. Debe cumplir con las políticas de seguridad."
          example: "S3cur3P@ssw0rd!"

    # DTO para la respuesta al crear un usuario
    userResponse:
      type: object
      description: "Datos del usuario creado, excluyendo información sensible."
      properties:
        id:
          type: string
          description: "Identificador único del usuario generado por el sistema."
          example: "c7a7e9a0-3a5e-4f1b-8f0a-9a8b7c6d5e4f"
        nombres:
          type: string
          example: "Juan Alberto"
        apellidos:
          type: string
          example: "Pérez Gómez"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"

    # DTO para respuestas de error estandarizadas
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

  # Esquema de seguridad JWT (Bearer Token)
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Se requiere un token JWT para acceder. Formato: 'Authorization: Bearer {token}'"

# Aplicamos la seguridad de forma global a toda la API
security:
  - BearerAuth: []

# Definición de las rutas (endpoints)
paths:
  /usuarios:
    post:
      summary: "Registrar un nuevo usuario"
      description: "Crea un nuevo usuario en el sistema. Esta operación requiere que el solicitante (administrador/asesor) esté autenticado."
      operationId: registeruser
      tags:
        - Gestión de usuarios
      requestBody:
        description: "Objeto con los datos del usuario a crear."
        required: true
        content:
          application/json:
            schema:
              # Hacemos referencia al esquema que definimos en components
              $ref: '#/components/schemas/usuarioRequest'
      responses:
        '201': # 'Created' es el código correcto para un POST exitoso
          description: "usuario registrado exitosamente."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuarioResponse'
        '400': # 'Bad Request' para errores de validación
          description: "Solicitud inválida. Faltan datos o tienen un formato incorrecto."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401': # 'Unauthorized' si el token falta o es inválido
          description: "No autorizado. El token JWT es requerido."
        '403': # 'Forbidden' si el token es válido pero no tiene permisos
          description: "Acceso denegado. No tienes los permisos para realizar esta acción."