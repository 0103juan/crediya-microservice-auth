# Versión de la especificación OpenAPI
openapi: 3.0.1

# Información básica y de contacto de la API
info:
  title: API de Autenticación - Crediya
  description: >
    Microservicio para gestionar el registro, autenticación y autorización de 
    usuarios en la plataforma Crediya.
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo Crediya
    url: https://www.crediya.com/soporte
    email: dev-support@crediya.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# Servidores donde la API estará disponible
servers:
  - url: http://localhost:8080/api/v1
    description: Servidor de desarrollo local
  - url: https://api.dev.crediya.com/v1
    description: Servidor de entorno de desarrollo
  - url: https://api.staging.crediya.com/v1
    description: Servidor de entorno de pruebas (Staging)
  - url: https://api.crediya.com/v1
    description: Servidor de producción

# Etiquetas para agrupar los endpoints
tags:
  - name: Gestión de Usuarios
    description: Operaciones relacionadas con la creación y administración de usuarios.

# Definición de las rutas (endpoints)
paths:
  /usuarios:
    post:
      summary: "Registrar un nuevo usuario"
      description: "Crea un nuevo usuario en el sistema. Esta operación requiere que el solicitante esté autenticado y tenga los permisos adecuados."
      operationId: registerUser
      tags:
        - Gestión de Usuarios
      requestBody:
        description: "Datos del usuario que se va a crear."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
            examples:
              # Ejemplo de una solicitud válida
              usuarioValido:
                summary: Ejemplo de registro de un usuario
                value:
                  firstName: "Carlos"
                  lastName: "Santana"
                  email: "carlos.santana@example.com"
                  idNumber: 123456789
                  phone: 3101234567
                  baseSalary: 2500000.0
                  birthDate: "1990-05-15"
                  address: "Calle Falsa 123, Ciudad"
                  role: "CLIENTE"
      responses:
        '201': # 'Created'
          description: "Usuario registrado exitosamente."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400': # 'Bad Request'
          description: "Solicitud inválida. Ocurre si los datos proporcionados no cumplen con las validaciones (ej. rol inválido, formato de datos incorrecto)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                rolInvalido:
                  summary: "Rol no válido"
                  value:
                    timestamp: "2023-10-27T10:30:00Z"
                    status: 400
                    error: "Bad Request"
                    message: "El rol especificado no es válido."
                    path: "/api/v1/usuarios"
        '401': # 'Unauthorized'
          description: "No autorizado. Se requiere un token JWT válido."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403': # 'Forbidden'
          description: "Acceso denegado. El usuario no tiene los permisos para esta acción."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404': # 'Not Found'
          description: "Recurso no encontrado. Ocurre si alguna entidad relacionada no se encuentra."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409': # 'Conflict'
          description: "Conflicto. El correo electrónico proporcionado ya está en uso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500': # 'Internal Server Error'
          description: "Error interno del servidor. Ocurrió un error inesperado al procesar la solicitud."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

# Componentes reutilizables
components:
  schemas:
    RegisterUserRequest:
      type: object
      title: "Esquema de solicitud de registro de usuario"
      description: "Datos completos para registrar un nuevo usuario en el sistema."
      required:
        - firstName
        - lastName
        - email
        - idNumber
        - phone
        - baseSalary
        - birthDate
        - address
        - role
      properties:
        firstName:
          type: string
          description: "Nombres del usuario."
          example: "Carlos"
          minLength: 2
          maxLength: 50
          pattern: "^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$"
        lastName:
          type: string
          description: "Apellidos del usuario."
          example: "Santana"
          minLength: 2
          maxLength: 50
          pattern: "^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$"
        email:
          type: string
          format: email
          description: "Correo electrónico único del usuario."
          example: "carlos.santana@example.com"
          maxLength: 100
        idNumber:
          type: integer
          format: int64
          description: "Número de identificación del usuario."
          example: 123456789
        phone:
          type: integer
          format: int64
          description: "Número de teléfono de contacto."
          example: 3101234567
        baseSalary:
          type: number
          format: double
          description: "Salario base del usuario."
          example: 2500000.0
          minimum: 0.0
          maximum: 15000000.0
        birthDate:
          type: string
          format: date
          description: "Fecha de nacimiento del usuario."
          example: "1990-05-15"
        address:
          type: string
          description: "Dirección de residencia del usuario."
          example: "Calle Falsa 123, Ciudad"
          minLength: 10
          maxLength: 200
        role:
          type: string
          description: "Rol asignado al usuario en el sistema."
          example: "CLIENTE"

    UserResponse:
      type: object
      title: "Esquema de respuesta de usuario"
      description: "Datos públicos del usuario una vez ha sido creado."
      properties:
        nombres:
          type: string
          description: "Nombres del usuario."
          example: "Carlos"
        apellidos:
          type: string
          description: "Apellidos del usuario."
          example: "Santana"
        email:
          type: string
          format: email
          description: "Correo electrónico del usuario."
          example: "carlos.santana@example.com"
        description:
          type: string
          description: "Descripción adicional o estado."
          example: "Usuario creado correctamente."

    ErrorResponse:
      type: object
      title: "Esquema de respuesta de error"
      description: "Estructura estándar para devolver información sobre errores."
      properties:
        timestamp:
          type: string
          format: date-time
          description: "Fecha y hora del error."
        status:
          type: integer
          description: "Código de estado HTTP."
        error:
          type: string
          description: "Nombre del error HTTP."
        message:
          type: string
          description: "Mensaje descriptivo del error."
        path:
          type: string
          description: "Ruta del endpoint invocado."

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Se requiere un token JWT en el encabezado 'Authorization': 'Bearer {token}'"

security:
  - BearerAuth: []