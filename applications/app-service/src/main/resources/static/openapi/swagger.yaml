openapi: 3.0.1
info:
  title: API de Autenticación - Crediya
  description: >
    Microservicio para gestionar el registro, autenticación y consulta de 
    usuarios en la plataforma Crediya.
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo Crediya
    url: https://www.crediya.com/soporte
    email: dev-support@crediya.com
servers:
  - url: http://localhost:8081
    description: Servidor de desarrollo local
  - url: https://api.dev.crediya.com
    description: Servidor de entorno de desarrollo
tags:
  - name: Autenticación
    description: Operaciones relacionadas con el inicio de sesión de usuarios.
  - name: Gestión de Usuarios
    description: Operaciones relacionadas con la creación y consulta de usuarios.
paths:
  /api/v1/login:
    post:
      summary: "Iniciar sesión de usuario"
      description: "Autentica a un usuario con su correo y contraseña, y devuelve un token JWT si las credenciales son correctas."
      operationId: loginUser
      tags:
        - Autenticación
      requestBody:
        description: "Credenciales del usuario para iniciar sesión."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "Autenticación exitosa."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseLoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: "Credenciales inválidas."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidCredentials:
                  summary: "Credenciales incorrectas"
                  value:
                    status: 401
                    code: "INVALID_CREDENTIALS_401"
                    message: "Credenciales inválidas"
                    path: "/api/v1/login"
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users:
    post:
      summary: "Registrar un nuevo usuario"
      description: "Crea un nuevo usuario en el sistema. Requiere autenticación y rol de 'ROLE_ADMIN' o 'ROLE_ASESOR'."
      operationId: registerUser
      tags:
        - Gestión de Usuarios
      security:
        - BearerAuth: []
      requestBody:
        description: "Datos del usuario que se va a crear."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: "Usuario registrado exitosamente."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: "Conflicto. El correo electrónico o el número de documento ya existe."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateData:
                  summary: "Datos duplicados"
                  value:
                    status: 409
                    code: "USER_ALREADY_EXISTS_409"
                    message: "El correo electrónico o el número de documento ya están registrados."
                    path: "/api/v1/users"
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{idNumber}:
    get:
      summary: "Buscar un usuario por número de documento"
      description: "Obtiene la información pública de un usuario a partir de su número de documento. Requiere autenticación."
      operationId: findUserByIdNumber
      tags:
        - Gestión de Usuarios
      security:
        - BearerAuth: []
      parameters:
        - name: idNumber
          in: path
          required: true
          description: "Número de documento del usuario a buscar."
          schema:
            type: string
            example: "123456789"
      responses:
        '200':
          description: "Usuario encontrado exitosamente."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/email/{email}:
    get:
      summary: "Buscar un usuario por correo electrónico"
      description: "Obtiene la información pública de un usuario a partir de su email. Requiere autenticación."
      operationId: findUserByEmail
      tags:
        - Gestión de Usuarios
      security:
        - BearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: "Correo electrónico del usuario a buscar."
          schema:
            type: string
            format: email
            example: "carlos.santana@example.com"
      responses:
        '200':
          description: "Usuario encontrado exitosamente."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RegisterUserRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - idNumber
        - phone
        - baseSalary
        - birthDate
        - address
        - role
      properties:
        firstName:
          type: string
          description: "Nombres del usuario. Debe tener entre 2 y 50 caracteres (solo letras y espacios)."
          example: "Carlos"
        lastName:
          type: string
          description: "Apellidos del usuario. Debe tener entre 2 y 50 caracteres (solo letras y espacios)."
          example: "Santana"
        email:
          type: string
          format: email
          description: "Correo electrónico único del usuario. Máximo 100 caracteres."
          example: "carlos.santana@example.com"
        password:
          type: string
          format: password
          description: "Contraseña del usuario. Debe tener entre 8 y 100 caracteres."
          example: "strongPassword123"
        idNumber:
          type: string
          description: "Número de identificación del usuario. Debe tener entre 7 y 15 dígitos."
          example: "123456789"
        phone:
          type: integer
          format: int64
          description: "Número de teléfono de contacto (10 dígitos)."
          example: 3101234567
        baseSalary:
          type: number
          format: double
          description: "Salario base del usuario. No puede ser negativo y no debe exceder 15,000,000."
          example: 2500000.0
        birthDate:
          type: string
          format: date
          description: "Fecha de nacimiento del usuario. Debe ser una fecha en el pasado."
          example: "1990-05-15"
        address:
          type: string
          description: "Dirección de residencia del usuario. Debe tener entre 10 y 200 caracteres."
          example: "Calle Falsa 123, Ciudad"
        role:
          type: string
          description: "Rol asignado al usuario en el sistema."
          example: "ROLE_CLIENTE"
          enum:
            - ROLE_ADMIN
            - ROLE_CLIENTE
            - ROLE_ASESOR

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "carlos.santana@example.com"
        password:
          type: string
          format: password
          example: "strongPassword123"

    UserResponse:
      type: object
      description: "Datos públicos del usuario."
      properties:
        firstName:
          type: string
          example: "Carlos"
        lastName:
          type: string
          example: "Santana"
        email:
          type: string
          format: email
          example: "carlos.santana@example.com"
        idNumber:
          type: string
          example: "123456789"

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: "Token JWT para autenticación."
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJjYXJsb3Muc2FudGFuYUBleGFtcGxlLmNvbSIsImV4cCI6MTY3OTg2NzU3MywiaWF0IjoxNjc5ODYzOTczfQ...."

    ApiResponseUserResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: string
        message:
          type: string
        path:
          type: string
        data:
          $ref: '#/components/schemas/UserResponse'

    ApiResponseLoginResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        code:
          type: string
        message:
          type: string
        path:
          type: string
        data:
          $ref: '#/components/schemas/LoginResponse'

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        code:
          type: string
        message:
          type: string
        path:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string

  responses:
    BadRequest:
      description: "Solicitud inválida. Los datos no cumplen con las validaciones."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              summary: "Error de validación"
              value:
                status: 400
                code: "USER_VALIDATION_ERROR_400"
                message: "La solicitud tiene errores de validación."
                path: "/api/v1/users"
                errors:
                  email: ["El formato del correo electrónico no es válido."]
    Unauthorized:
      description: "No autorizado. Se requiere un token JWT válido."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: "Token inválido o ausente"
              value:
                status: 401
                code: "UNAUTHORIZED"
                message: "Acceso no autorizado."
                path: "/api/v1/users/123456789"
    Forbidden:
      description: "Acceso denegado. El usuario no tiene los permisos necesarios."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: "Permisos insuficientes"
              value:
                status: 403
                code: "FORBIDDEN"
                message: "No tiene los permisos para realizar esta acción."
                path: "/api/v1/users"
    NotFound:
      description: "Usuario no encontrado."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            userNotFound:
              summary: "Usuario no existe"
              value:
                status: 404
                code: "USER_NOT_FOUND_404"
                message: "Usuario con idNumber 999888777 no encontrado."
                path: "/api/v1/users/999888777"
    InternalServerError:
      description: "Error interno del servidor."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverError:
              summary: "Error inesperado"
              value:
                status: 500
                code: "INTERNAL_SERVER_ERROR_500"
                message: "Ocurrió un error inesperado en el servidor."
                path: "/api/v1/login"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Se requiere un token JWT en el encabezado 'Authorization': 'Bearer {token}'"